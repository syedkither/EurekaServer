---
# This default profile is used when running a single instance completely standalone:
spring:
  profiles: default
  application:
    name: eureka-server-clustered   # ==> This is Service-Id
  cloud:
    config:
      uri: http://localhost:8888
  boot:
    admin:
      context-path: /admin  
server:
  port: 8761  
eureka:
  instance:
    hostname: my-eureka-server-us.com   #if it is localhost then we're running it in a local machine. Otherwise, we may end up creating an unavailable replica within the Eureka server - messing up the client's heartbeat counts
  client:
    registerWithEureka: true  #Telling the server not to register himself in the service registry
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://my-eureka-server-fr.com:8762/eureka/,http://my-eureka-server-vn.com:8763/eureka/ #http://${eureka.instance.hostname}:${server.port}/eureka/    
 
# united-states, france, and vietnam illustrate running 3 intercommunicating instances.  
# This example has them running side-by-side on localhost
# -- which is unrealistic in production
# -- but does illustrate how multiple instances collaborate.
#
# Run by opening 3 separate command prompts:
# java -jar -Dspring.profiles.active=united-states target\demo-0.0.1-SNAPSHOT.jar
# java -jar -Dspring.profiles.active=france target\demo-0.0.1-SNAPSHOT.jar
# java -jar -Dspring.profiles.active=vietnam target\demo-0.0.1-SNAPSHOT.jar
 

---
spring:
  profiles: france
  application:
    name: eureka-server-clustered   # ==> This is Service-Id   
  cloud:
    config:
      uri: http://localhost:8888   
  boot:
    admin:
      context-path: /admin
server:
  port: 8762
eureka:
  instance:
    hostname: my-eureka-server-fr.com      
  client:
    registerWithEureka: true
    fetchRegistry: true       
    serviceUrl:
      defaultZone: http://my-eureka-server-us.com:8761/eureka/,http://my-eureka-server-vn.com:8763/eureka/
 
---
spring:
  profiles: vietnam
  application:
    name: eureka-server-clustered    # ==> This is Service-Id  
  cloud:
    config:
      uri: http://localhost:8888   
  boot:
    admin:
      context-path: /admin
server:
  port: 8763
eureka:
  instance:
    hostname: my-eureka-server-vn.com
  client:
    registerWithEureka: true
    fetchRegistry: true   
    serviceUrl:
      defaultZone: http://my-eureka-server-us.com:8761/eureka/,http://my-eureka-server-fr.com:8762/eureka/   
           
management:
  security:
    enabled: false
    
    
    
    
#let's go through each of these configurations on the server-side.

#eureka.server.enable-self-preservation: Configuration for disabling self-preservation – the default value is true
#eureka.server.expected-client-renewal-interval-seconds: The server expects client heartbeats at an interval configured with this property – the default value is 30
#eureka.instance.lease-expiration-duration-in-seconds: Indicates the time in seconds that the Eureka server waits since it received the last heartbeat from a client before it can remove that client from its registry – the default value is 90
#eureka.server.eviction-interval-timer-in-ms: This property tells the Eureka server to run a job at this frequency to evict the expired clients – the default value is 60 seconds
#eureka.server.renewal-percent-threshold: Based on this property, the server calculates the expected heartbeats per minute from all the registered clients – the default value is 0.85
#eureka.server.renewal-threshold-update-interval-ms: This property tells the Eureka server to run a job at this frequency to calculate the expected heartbeats from all the registered clients at this minute – the default value is 15 minutes



#Suppose the number of registered application instances at some point in time is N and the configured renewal-percent-threshold is 0.85.
#Number of heartbeats expected from one instance / min = 2
#Number of heartbeats expected from N instances / min = 2 * N
#Expected minimum heartbeats / min = 2 * N * 0.85
#Since N is a variable, 2 * N * 0.85 is calculated in every 15 minutes by default (or based on renewal-threshold-update-interval-ms).